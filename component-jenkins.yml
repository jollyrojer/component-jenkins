application:
  configuration:
    input.image: "us-east-1/ami-59a4a230"
    input.image-user: "ubuntu"
    input.instance-size: "m1.small"
    input.recipe-url: "https://dl.dropboxusercontent.com/u/250836/jenkins.tar.gz"
    input.jenkins-server-port: 8080
    input.install-method: "package"
    input.jenkins-version: "1.568"

  interfaces:
    input:
      image: "bind(jenkins#input.image)"
      image-user: "bind(jenkins#input.image-user)"
      instance-size: "bind(jenkins#input.instance-size)"
      recipe-url: "bind(jenkins#input.recipe-url)"
      jenkins-server-port: "bind(jenkins#input.jenkins-server-port)"
      install-method: "bind(jenkins#input.install-method)"
      jenkins-version: "bind(jenkins#input.jenkins-version)"
    manage:
      add-slave-node: "bind(jenkins#actions.add-slave-node)"
      plugins: "bind(jenkins#actions.plugins-management)"
      restore-backup: "bind(jenkins#actions.restore-backup)"
    output:
      jenkins-server-host: "bind(jenkins#result.jenkins-server-host)"
      jenkins-url: "bind(jenkins#result.jenkins-server-url)"
      jenkins-admin-password: "bind(jenkins#result.jenkins-admin-password)"
      jenkins-server-pubkey: "bind(jenkins#result.jenkins-server-pubkey)"
      jenkins-slave-hosts: "bind(jenkins#result.jenkins-slave-hosts)"

  components:
    jenkins:
      type: workflow.Instance
      interfaces:
        input:
          image: configuration(string)
          instance-size: configuration(string)
          image-user: configuration(string)
          recipe-url: configuration(string)
          jenkins-server-port: configuration(int)
          install-method: configuration(string)
          jenkins-version: configuration(string)
        actions:
          add-slave-node: receive-command(string image, string image-user, string instance-size, string node-availability, string agent-type => list<string> jenkins-slave-hosts)
          plugins-management: receive-command(object plugins-info, string plugins-action)
          restore-backup: receive-command(string backup-uri, string restore-type)
        result:
          jenkins-server-host: publish-signal(string)
          jenkins-server-url: publish-signal(string)
          jenkins-admin-password: publish-signal(string)
          jenkins-server-pubkey: publish-signal(string)
          jenkins-slave-hosts: publish-signal(list<string>)

      configuration:
        configuration.workflows:
          launch:
            parameters:
              - image:
                  description: AMI id
              - image-user:
                  description: AMI ssh user
              - instance-size:
                  description: Instance type
              - recipe-url:
                  description: Recipe URL
              - jenkins-server-port:
                  description: Jenkins listen port
              - install-method:
                  description: Installation method (package, war)
              - jenkins-version:
                  description: Jenkins version to install
            steps:
              - provision-server-vm:
                  action: provisionVms
                  parameters:
                    hardwareId: "{$.instance-size}"
                    imageId: "{$.image}"
                    vmIdentity: "{$.image-user}"
                    roleName: server
                  output:
                    jenkins-server-hosts: ips

              - install-jenkins-server:
                  action: chefsolo
                  precedingPhases: [provision-server-vm]
                  parameters:
                    recipeUrl: "{$.recipe-url}"
                    runList: [ "recipe[cookbook_qubell_jenkins::default]" ]
                    roles: [ server ]
                    jattrs:
                      jenkins:
                        server:
                          host: "{$.jenkins-server-hosts[0]}"
                          port: "{$.jenkins-server-port}"
                          install_method: "{$.install-method}"
                          version: "{$.jenkins-version}"
                  output:
                    server-attrs: chefState

            return:
              jenkins-server-host:
                value: "{$.jenkins-server-hosts[0]}"
              jenkins-slave-hosts:
                value: []
              jenkins-server-url:
                value: "http://{$.jenkins-server-hosts[0]}:{$.jenkins-server-port}"
              jenkins-admin-password:
                value: "{$.server-attrs['*'].jenkins.server.admin_password[0]}"
              jenkins-server-pubkey:
                value: "{$.server-attrs['*'].jenkins.server.pubkey[0]}"

          add-slave-node:
            parameters:
              - image:
                  description: AMI id
              - image-user:
                  description: AMI ssh user
              - instance-size:
                  description: Instance type
              - agent-type:
                  default: jnlp
                  description: Jenkins slave node agent type (jnlp, ssh, windows)
              - node-availability:
                  default: demand
                  description: Jenkins slave node availability (demand, always)

            steps:
              - provision-slave-vm:
                  action: provisionVms
                  parameters:
                    hardwareId: "{$.instance-size}"
                    imageId: "{$.image}"
                    vmIdentity: "{$.image-user}"
                    roleName: slave
                  output:
                    jenkins-slave-hosts: ips

              - install-jenkins-slave:
                  action: chefsolo
                  precedingPhases: [provision-slave-vm]
                  parameters:
                    recipeUrl: "{$.recipe-url}"
                    runList: [ "recipe[cookbook_qubell_jenkins::node]" ]
                    roles: [ slave ]
                    jattrs:
                      jenkins:
                        server:
                          url: "http://{$.jenkins-server-hosts[0]}:{$.jenkins-server-port}"
                          pubkey: "{$.server-attrs['*'].jenkins.server.pubkey[0]}"
                        node:
                          agent_type: "{$.agent-type}"
                          availability: "{$.node-availability}"
                        cli:
                          username: "admin"
                          password: "{$.server-attrs['*'].jenkins.server.admin_password[0]}"
                  output:
                    slave-attrs: chefState

            return:
              jenkins-slave-hosts:
                value: "{$.jenkins-slave-hosts}"

          plugins-management:
            parameters:
              - plugins-info:
                  description: "Plugins name, version and URL as hash"
              - plugins-action:
                  default: install
                  description: "Install or remove"
            steps:
              - plugins-management:
                  action: chefsolo
                  parameters:
                    recipeUrl: "{$.recipe-url}"
                    runList: ["recipe[cookbook_qubell_jenkins::plugins_management]"]
                    roles: [server]
                    jattrs:
                      jenkins:
                        server:
                          plugins: "{$.plugins-info}"
                          plugins_action: "{$.plugins-action}"

          restore-backup:
            parameters:
              - backup-uri:
                  description: URI to backup archive (zip or tar.gz)
              - restore-type:
                  description: Backup contents (full, jobs, job)
                  #full - restore full jenkins backup
                  #jobs - will restore all jobs
                  #job - restore single job
            steps:
              - restore-backup:
                  action: chefsolo
                  parameters:
                    recipeUrl: "{$.recipe-url}"
                    runList: ["recipe[cookbook_qubell_jenkins::restore_backup]"]
                    roles: [server]
                    jattrs:
                      jenkins:
                        server:
                          restore_backup: "{$.restore-type}"
                        backup_uri: "{$.backup-uri}"
