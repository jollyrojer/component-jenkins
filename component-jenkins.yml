application:
  configuration:
    input.server-os: {image: "us-east-1/ami-1ba18d72", identity: ec2-user}
    input.server-instance-size: "m1.small"
    input.slave-linux-os: {image: "us-east-1/ami-1ba18d72", identity: "ec2-user"}
    input.slave-linux-instance-size: "m1.small"
    input.slave-linux-quantity: 0
    input.slave-windows-os: {image: "us-east-1/ami-ba13abd2", identity: "Administrator"}
    input.slave-windows-instance-size: "m1.medium"
    input.slave-windows-quantity: 0
    input.slave-windows-user-password: "123QweAsd"
    input.agent-type: "jnlp"
    input.availability: "always"
    input.recipe-url: "https://s3.amazonaws.com/qubell-starter-kit-artifacts/qubell-bazaar/component-jenkins-cookbooks-stable-241b83a.tar.gz"
    input.jenkins-server-port: 8080
    input.install-method: "package"
    input.jenkins-version: "1.572-1.1"
    input.plugins-info: []
    input.plugins-action: "install"
    input.backup-uri: ""
    input.restore-type: ""
  interfaces:
    input:
      server-os: "bind(jenkins-server#input.server-os)"
      server-instance-size: "bind(jenkins-server#input.server-instance-size)"
      recipe-url: "bind(jenkins-server#input.recipe-url, linux-nodes.jenkins-linux-slave#input.recipe-url, windows-nodes.jenkins-windows-slave#input.recipe-url)"
      jenkins-server-port: "bind(jenkins-server#input.jenkins-server-port)"
      install-method: "bind(jenkins-server#input.install-method)"
      jenkins-version: "bind(jenkins-server#input.jenkins-version)"
      plugins-info: "bind(jenkins-server#input.plugins-info)"
      plugins-action: "bind(jenkins-server#input.plugins-action)"
      backup-uri: "bind(jenkins-server#input.backup-uri)"
      restore-type: "bind(jenkins-server#input.restore-type)"
      slave-linux-os: "bind(linux-nodes.jenkins-linux-slave#input.slave-linux-os)"
      slave-linux-instance-size: "bind(linux-nodes.jenkins-linux-slave#input.slave-linux-instance-size)"
      slave-linux-quantity: "bind(proxy#input.slave-linux-quantity)"
      slave-windows-os: "bind(windows-nodes.jenkins-windows-slave#input.slave-windows-os)"
      slave-windows-instance-size: "bind(windows-nodes.jenkins-windows-slave#input.slave-windows-instance-size)"
      slave-windows-quantity: "bind(proxy#input.slave-windows-quantity)"
      slave-windows-user-password: "bind(windows-nodes.jenkins-windows-slave#input.slave-windows-user-password)"
      agent-type: "bind(linux-nodes.jenkins-linux-slave#input.agent-type)"
      availability: "bind(windows-nodes.jenkins-windows-slave#input.availability, linux-nodes.jenkins-linux-slave#input.availability)"
    manage:
      plugins: "bind(jenkins-server#actions.plugins-management)"
      restore-backup: "bind(jenkins-server#actions.restore-backup)"
    output:
      jenkins-server-host: "bind(jenkins-server#result.jenkins-server-host)"
      jenkins-server-url: "bind(jenkins-server#result.jenkins-server-url)"
      jenkins-server-user: "bind(jenkins-server#result.jenkins-server-user)"
      jenkins-server-password: "bind(jenkins-server#result.jenkins-server-password)"
      jenkins-server-pubkey: "bind(jenkins-server#result.jenkins-server-pubkey)"
  bindings:
    - [linux-nodes.jenkins-linux-slave, jenkins-server]
    - [windows-nodes.jenkins-windows-slave, jenkins-server]
    - [proxy#linux-nodes, linux-nodes]
    - [proxy#windows-nodes, windows-nodes]
  components:
    jenkins-server:
      type: workflow.Instance
      interfaces:
        input:
          server-os: 
            type: configuration(map<string,object>)
            suggestions:
              amazon-linux: {image: "us-east-1/ami-1ba18d72", identity: ec2-user}
              centos-64: {image: "us-east-1/ami-ee698586", identity: root}
              ubuntu-1204: {image: "us-east-1/ami-d0f89fb9", identity: ubuntu}
          server-instance-size: configuration(string)
          recipe-url: configuration(string)
          jenkins-server-port: configuration(int)
          install-method: configuration(string)
          jenkins-version: configuration(string)
          plugins-info: configuration(object)
          plugins-action: configuration(string)
          backup-uri: configuration(string)
          restore-type: configuration(string)
        actions:
          plugins-management: receive-command(object plugins-info, string plugins-action)
          restore-backup: receive-command(string backup-uri, string restore-type)
        result:
          jenkins-server-host: publish-signal(string)
          jenkins-server-url: publish-signal(string)
          jenkins-server-user: publish-signal(string)
          jenkins-server-password: publish-signal(string)
          jenkins-server-pubkey: publish-signal(string)
          jenkins-server-state: publish-signal(string)
      configuration:
        configuration.triggers:
          input.plugins-info: plugins-management
          input.backup-uri: restore-backup
        configuration.propagateStatus: [plugins-management,restore-backup]
        configuration.workflows:
          launch:
            steps:
              - provision-server-vm:
                  action: provisionVms
                  parameters:
                    hardwareId: "{$.server-instance-size}"
                    imageId: "{$.server-os.image}"
                    vmIdentity: "{$.server-os.identity}"
                    roleName: server
                  output:
                    jenkins-server-hosts: ips

              - setup-jenkins-server:
                  action: chefsolo
                  precedingPhases: [provision-server-vm]
                  parameters:
                    recipeUrl: "{$.recipe-url}"
                    runList: [ "recipe[cookbook_qubell_jenkins::default]" ]
                    roles: [ server ]
                    jattrs:
                      qubell_jenkins: 
                        version: "{$.jenkins-version}"
                        plugins: "{$.plugins-info}"
                        backup_uri: "{$.backup-uri}"
                        restore_type: "{$.restore-type}"
                      jenkins:
                        server:
                          host: "{$.jenkins-server-hosts[0]}"
                          port: "{$.jenkins-server-port}"
                          install_method: "{$.install-method}"
                  output:
                    server-attrs: chefState
            return:
              jenkins-server-host:
                value: "{$.jenkins-server-hosts[0]}"
              jenkins-server-url:
                value: "http://{$.jenkins-server-hosts[0]}:{$.jenkins-server-port}"
              jenkins-server-user:
                value: "admin"
              jenkins-server-password:
                value: "{$.server-attrs['*'].jenkins.server.admin_password[0]}"
              jenkins-server-pubkey:
                value: "{$.server-attrs['*'].jenkins.server.pubkey[0]}"
              jenkins-server-state:
                value: "{$.server-attrs['*'].qubell_jenkins.state[0]}"
          plugins-management:
            parameters:
              - plugins-info:
                  description: "Plugins name, version and URL as hash"
              - plugins-action:
                  default: install
                  description: "Install or remove"
            steps:
              - plugins-management:
                  action: chefsolo
                  parameters:
                    recipeUrl: "{$.recipe-url}"
                    runList: ["recipe[cookbook_qubell_jenkins::plugins_management]"]
                    roles: [server]
                    jattrs:
                      jenkins:
                        server:
                          plugins: "{$.plugins-info}"
                          plugins_action: "{$.plugins-action}"
          restore-backup:
            parameters:
              - backup-uri:
                  description: URI to backup archive (zip or tar.gz)
              - restore-type:
                  description: Backup contents (jobs, job)
                  #jobs - will restore all jobs
                  #job - restore single job
            steps:
              - restore-backup:
                  action: chefsolo
                  parameters:
                    recipeUrl: "{$.recipe-url}"
                    runList: ["recipe[cookbook_qubell_jenkins::restore_backup]"]
                    roles: [server]
                    jattrs:
                      qubell_jenkins:
                        restore_type: "full"
                        backup_uri: "{$.backup-uri}"
                  output:
                    server-attrs: chefState
              - wait-jenkins-server:
                  action: wait
                  precedingPhases: [restore-backup]
                  parameters:
                    delay: 5 minutes
            return:
              jenkins-server-state:
                value: "{$.server-attrs['*'].qubell_jenkins.state[0]}"
    proxy:
      type: workflow.Instance
      interfaces:
        input:
          slave-linux-quantity: configuration(int)
          slave-windows-quantity: configuration(int)
        linux-nodes:
          set-quantity: send-command(int quantity)
        windows-nodes:
          set-quantity: send-command(int quantity)
      configuration:
        configuration.propagateStatus: [ scale ]
        configuration.triggers:
          input.slave-linux-quantity: scale
          input.slave-windows-quantity: scale
        configuration.workflows:
          launch: &scale-wf
            steps:
              - init-linux-nodes:
                  action: commandCall
                  parameters:
                    service: linux-nodes
                    command: set-quantity
                    arguments:
                      quantity: "{$.slave-linux-quantity}"
                    timeout: 30 minutes
              - init-windows-nodes:
                  action: commandCall
                  parameters:
                    service: windows-nodes
                    command: set-quantity
                    arguments:
                      quantity: "{$.slave-windows-quantity}"
                    timeout: 30 minutes
          scale: *scale-wf

    linux-nodes:
      type: composite.Scaler
      configuration:
        configuration.minQuantity: 0
      components:
        jenkins-linux-slave:
          type: workflow.Instance
          interfaces:
            input:
              slave-linux-os: configuration(object)
              slave-linux-instance-size: configuration(string)
              recipe-url: configuration(string)
              agent-type: configuration(string)
              availability: configuration(string)
            jenkins-server:
              jenkins-server-url: consume-signal(string)
              jenkins-server-pubkey: consume-signal(string)
              jenkins-server-user: consume-signal(string)
              jenkins-server-password: consume-signal(string)
              jenkins-server-state: consume-signal(string)
            result:
              jenkins-linux-slaves: publish-signal(object)
          required: [jenkins-server]
          configuration:
            configuration.triggers:
              jenkins-server.jenkins-server-state: update
            configuration.propagateStatus: [update]
            configuration.workflows:
              launch: &update-node
                steps:
                  - get-env-props:
                      action: getEnvironmentProperties
                      output:
                        props: result
                  - provision-vm:
                      action: provisionVms
                      precedingPhases: [get-env-props]
                      parameters:
                        hardwareId: "{$.slave-linux-instance-size}"
                        imageId: "{$.slave-linux-os.image}"
                        vmIdentity: "{$.slave-linux-os.identity}"
                        targetQuantity: 1
                        roleName: default
                      output:
                        jenkins-linux-slave-hosts: ips
                  - get-hostname:
                      action: execrun
                      precedingPhases: [provision-vm]
                      parameters:
                        roles: [ default ]
                        isSudo: true
                        command:
                          - curl -s http://169.254.169.254/latest/meta-data/local-hostname
                      output:
                        jenkins-linux-slave-pdns: stdout
                  - install-jenkins-slave:
                        action: chefsolo
                        precedingPhases: [get-hostname]
                        parameters:
                          recipeUrl: "{$.recipe-url}"
                          runList: [ "recipe[cookbook_qubell_jenkins::node]" ]
                          roles: [ default ]
                          jattrs:
                            jenkins:
                              server:
                                url: "{$.props.jenkins-server.jenkins-server-url}"
                                pubkey: "{$.props.jenkins-server.jenkins-server-pubkey}"
                              node:
                                agent_type: "{$.agent-type}"
                                availability: "{$.availability}"
                              cli:
                                username: "{$.props.jenkins-server.jenkins-server-user}"
                                password: "{$.props.jenkins-server.jenkins-server-password}"
                return:
                  jenkins-linux-slaves:
                    value:
                      hosts: "{$.jenkins-linux-slave-hosts}"
                      pdns: "{$.jenkins-linux-slave-pdns}"
              update: *update-node
              destroy:
                steps:
                  - get-env-props:
                      action: getEnvironmentProperties
                      output:
                        props: result
                  - delete-node-from-server:
                      action: chefsolo
                      precedingPhases: [get-env-props]
                      parameters:
                        recipeUrl: "{$.recipe-url}"
                        runList: ["recipe[cookbook_qubell_jenkins::delete_node]"]
                        roles: [default]
                        jattrs:
                          jenkins:
                            server:
                              url: "{$.props.jenkins-server.jenkins-server-url}"
                            cli:
                              username: "{$.props.jenkins-server.jenkins-server-user}"
                              password: "{$.props.jenkins-server.jenkins-server-password}"
                            node:
                              name: "{$.jenkins-linux-slaves.pdns['*'][0]}"
    windows-nodes:
      type: composite.Scaler
      configuration:
        configuration.minQuantity: 0
      components:
        jenkins-windows-slave:
          type: workflow.Instance
          interfaces:
            input:
              slave-windows-os: configuration(object)
              slave-windows-instance-size: configuration(string)
              slave-windows-user-password: configuration(string)
              recipe-url: configuration(string)
              availability: configuration(string)
            jenkins-server:
              jenkins-server-url: consume-signal(string)
              jenkins-server-pubkey: consume-signal(string)
              jenkins-server-user: consume-signal(string)
              jenkins-server-password: consume-signal(string)
              jenkins-server-state: consume-signal(string)
            result:
              jenkins-windows-slaves: publish-signal(object)
              jenkins-windows-slaves-password: publish-signal(object)
          required: [jenkins-server]
          configuration:
            configuration.triggers:
              jenkins-server.jenkins-server-state: update
            configuration.propagateStatus: [update]
            configuration.workflows:
              launch: &update-node

                steps:
                  - get-env-props:
                      action: getEnvironmentProperties
                      output:
                        props: result
                  - provision-slave-windows-vm:
                      action: provisionVms
                      precedingPhases: [get-env-props]
                      parameters:
                        connectTimeout: 20 minutes
                        hardwareId: "{$.slave-windows-instance-size}"
                        imageId: "{$.slave-windows-os.image}"
                        targetQuantity: 1
                        vmIdentity: "{$.slave-windows-os.identity}"
                        roleName: default
                        providerSettings:
                          userData:
                             |
                                <powershell>

                                    If (Test-Path "C:\cygwin64\bin\bash.exe") {{

                                    }} Else {{
                                          If ((whoami).tolower().endswith("system")) {{
                                                # Cygwin service management does not work properly when installed and used from SYSTEM user
                                                # trying to elevate priveleges to Administrator by changing password
                                                If (Test-Path "C:\pstools\PsExec.exe") {{
                                                      # already installed, skip
                                                }} else {{
                                                      mkdir C:\pstools
                                                      (New-Object System.Net.WebClient).DownloadFile("http://download.sysinternals.com/files/PSTools.zip", "C:\pstools\PSTools.zip")
                                                      [System.Reflection.Assembly]::LoadWithPartialName('System.IO.Compression.FileSystem')
                                                      [System.IO.Compression.ZipFile]::ExtractToDirectory("C:\pstools\PSTools.zip", "C:\pstools")
                                                }}

                                                $$password = "832d95C060"

                                                # TODO: this assumes that administrator password will be reset by cloudbase-init later
                                                NET USER ADMINISTRATOR $$password

                                                $$arguments = @("-accepteula", "-u", "Administrator", "-p", $$password, "-h")
                                                $$arguments = $$arguments + @("powershell") + $$myInvocation.MyCommand.Definition
                                                Start-Process C:\pstools\psexec.exe -NoNewWindow -ArgumentList $$arguments
                                                exit

                                          }}

                                          (New-Object System.Net.WebClient).DownloadFile("http://cygwin.com/setup-x86_64.exe", "setup-x86_64.exe")

                                          .\setup-x86_64.exe --no-desktop --site http://mirrors.syringanetworks.net/cygwin/ --quiet-mode --local-package-dir C:\cygwin64\local_packages --packages 'openssh,curl,util-linux,procps,wget' | Out-Host

                                          C:\cygwin64\bin\bash.exe --login -c "cp /usr/bin/ps.exe /usr/bin/ps.exe~; cp /bin/ps.exe /bin/ps.exe~; cp /usr/bin/procps.exe /usr/bin/ps.exe; cp /usr/bin/procps.exe /bin/ps.exe"

                                          C:\cygwin64\bin\bash.exe --login -c "ssh-host-config --yes --user cyg_server --pwd twEntys1x"

                                          # sshd 6.7 is too restrictive, reverting to 6.6 defaults
                                          C:\cygwin64\bin\bash.exe --login -c "echo Ciphers aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,aes192-cbc,aes256-cbc,arcfour >> /etc/sshd_config"
                                          C:\cygwin64\bin\bash.exe --login -c "echo MACs hmac-md5,hmac-sha1,hmac-ripemd160,hmac-sha1-96,hmac-md5-96 >> /etc/sshd_config"
                                          C:\cygwin64\bin\bash.exe --login -c "echo KexAlgorithms curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1,diffie-hellman-group-exchange-sha1 >> /etc/sshd_config"

                                          netsh advfirewall firewall add rule name="CYGWIN sshd" dir=in action=allow program="C:\cygwin64\usr\sbin\sshd.exe" enable=yes
                                    }}

                                    If (Test-Path "C:/opscode/chef/bin/chef-solo") {{
                                        # chef installed, do nothing
                                    }} Else {{
                                        cd C:\
                                        $$chef_build = "10.32.2-3"  # also 11.16.4-1 supported
                                        $$chef_version = $$chef_build.Split("-")[0]
                                        $$chef_major_version = $$chef_build.Split(".")[0]
                                        C:\cygwin64\bin\curl.exe -O "https://opscode-omnibus-packages.s3.amazonaws.com/windows/2008r2/x86_64/chef-windows-$${{chef_build}}.windows.msi"
                                        Start-Process -FilePath msiexec -ArgumentList /i, "C:\chef-windows-$${{chef_build}}.windows.msi", /quiet, /qn -Wait
                                        # supply chef original tar
                                        C:/cygwin64/bin/sed -i "s|tar zxvf|C:/opscode/chef/bin/tar zxvf|"  C:/opscode/chef/embedded/lib/ruby/gems/1.9.1/gems/chef-$${{chef_version}}-x86-mingw32/lib/chef/application/solo.rb
                                        if ($$chef_major_version -eq "11") {{
                                            # fix chef bug
                                            C:/cygwin64/bin/sed -i "s/status.exitstatus/0/g"                   C:/opscode/chef/embedded/lib/ruby/gems/1.9.1/gems/chef-$${{chef_version}}-x86-mingw32/lib/chef/mixin/command.rb
                                        }}
                                    }}

                                    C:\cygwin64\bin\bash.exe --login -c "mkdir ~/bin"

                                    C:\cygwin64\bin\bash.exe --login -c "cat > ~/bin/shef <<'EEND'
                                #!/usr/bin/bash --login
                                /cygdrive/c/opscode/chef/embedded/bin/ruby.exe C:/opscode/chef/bin/shef `$$*
                                EEND
                                chmod +x ~/bin/shef
                                "

                                    C:\cygwin64\bin\bash.exe --login -c "cat > ~/bin/chef-client <<'EEND'
                                #!/usr/bin/bash --login
                                /cygdrive/c/opscode/chef/embedded/bin/ruby.exe C:/opscode/chef/bin/chef-client `$$*
                                EEND
                                chmod +x ~/bin/chef-client
                                "

                                    C:\cygwin64\bin\bash.exe --login -c "cat > ~/bin/chef-solo <<'EEND'
                                #!/usr/bin/bash --login

                                CONFIG_PATH=
                                OTHER_ARGS=
                                while [ \`"x`$$1\`" != x ]; do
                                    if [ \`"`$$1\`" == -c ]; then
                                        shift;
                                        CONFIG_PATH=\`"`$$1\`"
                                        shift;
                                    else
                                        OTHER_ARGS=\`"`$$OTHER_ARGS `$$1\`"
                                        shift;
                                    fi
                                done

                                FILE_CACHE=`$$(grep file_cache_path `$$CONFIG_PATH | awk '{{print `$$2}}' | sed -re 's/\x22(.*)\x22/\1/')
                                COOKBOOKS=`$$(grep cookbook_path `$$CONFIG_PATH | awk '{{print `$$2}}' | sed -re 's/.*\x22(.*)\x22.*/\1/')
                                QUBELL_COOKBOOKS=`$$(grep cookbook_path `$$CONFIG_PATH | awk '{{print `$$3}}' | sed -re 's/.*\x22(.*)\x22.*/\1/')
                                ROLES=`$$(grep role_path `$$CONFIG_PATH | awk '{{print `$$2}}' | sed -re 's/.*\x22(.*)\x22.*/\1/')
                                DATA_BAGS=`$$(grep data_bag_path `$$CONFIG_PATH | awk '{{print `$$2}}' | sed -re 's/.*\x22(.*)\x22.*/\1/')
                                NODE_PATH=`$$(grep node_path `$$CONFIG_PATH | awk '{{print `$$2}}' | sed -re 's/.*\x22(.*)\x22.*/\1/')
                                NODE_NAME=`$$(grep node_name `$$CONFIG_PATH | awk '{{print `$$2}}' | sed -re 's/.*\x22(.*)\x22.*/\1/')
                                NEW_ROOT=`$$(mktemp -d)
                                # platform homedir detection behaves wrong in some cases, so we should detect and fix it
                                if echo `$$NODE_PATH | grep -E '^.?\.undeploy.me' >/dev/null 2>/dev/null; then
                                    ROOT_FIX=`$$(cygpath -m `$$HOME)/
                                    OLD_ROOT=`$$ROOT_FIX
                                else
                                    ROOT_FIX=''
                                    OLD_ROOT=`$$FILE_CACHE
                                fi
                                pushd `$$OLD_ROOT
                                icacls . /save access.txt
                                icacls `$$(cygpath -m `$$NEW_ROOT) /restore access.txt
                                popd
                                cp -r `$$ROOT_FIX`$$COOKBOOKS `$$NEW_ROOT/cookbooks 2>/dev/null
                                cp -r `$$ROOT_FIX`$$QUBELL_COOKBOOKS `$$NEW_ROOT/qubell_cookbooks 2>/dev/null
                                cp -r `$$ROOT_FIX`$$DATA_BAGS `$$NEW_ROOT/data_bags 2>/dev/null
                                cp -r `$$ROOT_FIX`$$ROLES `$$NEW_ROOT/roles 2>/dev/null
                                cd ~
                                NODE_PATH_FIX=`$$(echo `$$NODE_PATH | cut -c 2-)
                                mkdir -p `$$NODE_PATH_FIX
                                chmod 0755 `$$NODE_PATH_FIX
                                chmod 0755 `$$NODE_PATH_FIX/`$$NODE_NAME.json
                                chmod 0755 `$$ROOT_FIX`$$NODE_PATH_FIX
                                chmod 0755 `$$ROOT_FIX`$$NODE_PATH_FIX/`$$NODE_NAME.json
                                cat `$$CONFIG_PATH | sed -re \`"s|`$$COOKBOOKS|`$$(cygpath -m `$$NEW_ROOT/cookbooks)|;s|`$$QUBELL_COOKBOOKS|`$$(cygpath -m `$$NEW_ROOT/qubell_cookbooks)|;s|`$$DATA_BAGS|`$$(cygpath -m `$$NEW_ROOT/data_bags)|;s|`$$ROLES|`$$(cygpath -m `$$NEW_ROOT/roles)|;s|`$$NODE_PATH|`$$ROOT_FIX`$$NODE_PATH_FIX|;s|\x22`$$FILE_CACHE\x22|\x22`$$(cygpath -m `$$NEW_ROOT)\x22|;\`" > `$$NEW_ROOT/client.rb

                                /cygdrive/c/opscode/chef/embedded/bin/ruby.exe C:/opscode/chef/bin/chef-solo -c `$$(cygpath -m `$$NEW_ROOT/client.rb) `$$OTHER_ARGS
                                EEND
                                chmod +x ~/bin/chef-solo
                                "

                                    C:\cygwin64\bin\bash.exe --login -c "cat > ~/.bashrc <<'EEND'
                                export LC_ALL=C
                                export LANG=C
                                export PATH=~/bin:`$$PATH
                                EEND
                                "

                                    C:\cygwin64\bin\bash.exe --login -c "mkdir ~/.ssh"
                                    $$drive = (Get-Volume -FileSystemLabel config-2 | % {{ $$_.DriveLetter }})
                                    If (Test-Path "$${{drive}}:\openstack\") {{
                                        C:\cygwin64\bin\bash.exe --login -c "grep ssh-rsa `$$(find `$$(find /cygdrive -maxdepth 2 -name openstack -or -name ec2) -name 'meta?data.json') | sed -re 's/.*(ssh-rsa [a-zA-Z0-9+/=]+).*/\1/' | uniq >> ~/.ssh/authorized_keys"
                                    }} Else {{
                                        C:\cygwin64\bin\bash.exe --login -c "curl --connect-timeout 5 169.254.169.254/latest/meta-data/public-keys/0/openssh-key >> ~/.ssh/authorized_keys"
                                    }}

                                    net start sshd
                                </powershell>

                      output:
                        jenkins-windows-slave-hosts: ips
                  - change-admin-password:
                      action: execrun
                      precedingPhases: [provision-slave-windows-vm]
                      parameters:
                        roles: [default]
                        command:
                         - "NET USER ADMINISTRATOR {$.slave-windows-user-password}"
                  - get-hostname:
                      action: execrun
                      precedingPhases: [change-admin-password]
                      parameters:
                        roles: [default]
                        command:
                         - hostname
                      output:
                        jenkins-windows-slave-pdns: stdout  
                  - install-jenkins-slave:
                      action: chefsolo
                      precedingPhases: [get-hostname]
                      parameters:
                        isSudo: false
                        recipeUrl: "{$.recipe-url}"
                        runList: [ "recipe[cookbook_qubell_jenkins::node]" ]
                        roles: [default]
                        jattrs:
                          jenkins:
                            server:
                              url: "{$.props.jenkins-server.jenkins-server-url}"
                            node:
                              agent_type: "windows"
                              availability: "{$.availability}"
                            cli:
                              username: "{$.props.jenkins-server.jenkins-server-user}"
                              password: "{$.props.jenkins-server.jenkins-server-password}"
                          java:
                            java_home: 'C:\Program Files\Java'
                            windows:
                              url: "https://s3.amazonaws.com/qubell-starter-kit-artifacts/deps/jdk-7u71-windows-x64.exe"
                return:
                  jenkins-windows-slaves:
                    value:
                      hosts: "{$.jenkins-windows-slave-hosts}"
                      pdns: "{$.jenkins-windows-slave-pdns}"
                  jenkins-windows-slaves-password:
                    value: "{$.slave-windows-user-password}"
              update: *update-node
              destroy:
                steps:
                  - get-env-props:
                      action: getEnvironmentProperties
                      output:
                        props: result
                  - delete-node-from-server:
                      action: chefsolo
                      precedingPhases: [get-env-props]
                      parameters:
                        isSudo: false
                        recipeUrl: "{$.recipe-url}"
                        runList: ["recipe[cookbook_qubell_jenkins::delete_node]"]
                        roles: [default]
                        jattrs:
                          jenkins:
                            server:
                              url: "{$.props.jenkins-server.jenkins-server-url}"
                            cli:
                              username: "{$.props.jenkins-server.jenkins-server-user}"
                              password: "{$.props.jenkins-server.jenkins-server-password}"
                            node:
                              name: "{$.jenkins-windows-slaves.pdns['*'][0]}"
